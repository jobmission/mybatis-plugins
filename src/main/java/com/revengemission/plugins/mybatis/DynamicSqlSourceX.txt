
import org.apache.ibatis.builder.xml.XMLMapperEntityResolver;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.SqlSource;
import org.apache.ibatis.parsing.XNode;
import org.apache.ibatis.parsing.XPathParser;
import org.apache.ibatis.scripting.xmltags.XMLScriptBuilder;
import org.apache.ibatis.session.Configuration;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

public class DynamicSqlSourceX implements SqlSource {
    private final Configuration configuration;
    boolean updateFlag = false;

    List<String> selectBlockList = Arrays.asList(".*update\\s+.*", ".*insert\\s+.*", ".*delete\\s+.*", ".*into\\s+.*", ".*create\\s+.*", ".*truncate\\s+.*", ".*alter\\s+.*", ".*drop\\s+.*", ".*rename\\s+.*", ".*grant\\s+.*", ".*revoke\\s+.*", ".*source\\s+.*", ".*load\\s+.*");
    String selectAllow = ".*select\\s+.*";


    public DynamicSqlSourceX(Configuration configuration, boolean updateFlag) {
        this.configuration = configuration;
        this.updateFlag = updateFlag;
    }

    @SuppressWarnings("unchecked")
    @Override
    public BoundSql getBoundSql(Object parameterObject) {
        Map<String, String> parames = (Map<String, String>) parameterObject;
        if (!parames.containsKey("sql") || parames.get("sql") == null) {
            throw new RuntimeException("缺少sql语句");
        }
        String sql = parames.get("sql");

        String sqlToCheck = sql.toLowerCase();
        if (updateFlag) {
            throw new RuntimeException("无效select查询sql \n " + sql);
        } else {
            if (!Pattern.matches(selectAllow, sqlToCheck)) {
                throw new RuntimeException("无效select查询sql \n " + sql);
            }
            for (String pattern : selectBlockList) {
                if (Pattern.matches(pattern, sqlToCheck)) {
                    throw new RuntimeException("无效select查询sql \n " + sql);
                }
            }
        }

        String scriptSql = "<script>" + sql + "</script>";
        XPathParser parser = new XPathParser(scriptSql, false, configuration.getVariables(), new XMLMapperEntityResolver());
        XNode xNode = parser.evalNode("/script");
        XMLScriptBuilder xmlScriptBuilder = new XMLScriptBuilder(configuration, xNode);
        return xmlScriptBuilder.parseScriptNode().getBoundSql(parames);
    }
}
