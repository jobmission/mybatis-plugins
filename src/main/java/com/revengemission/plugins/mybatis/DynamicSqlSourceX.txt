
import org.apache.ibatis.builder.xml.XMLMapperEntityResolver;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.SqlSource;
import org.apache.ibatis.parsing.XNode;
import org.apache.ibatis.parsing.XPathParser;
import org.apache.ibatis.scripting.xmltags.XMLScriptBuilder;
import org.apache.ibatis.session.Configuration;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

public class DynamicSqlSourceX implements SqlSource {
    private final Configuration configuration;
    boolean updateFlag;

    static List<Pattern> selectBlockList = new ArrayList<>();

    static {
        selectBlockList.add(Pattern.compile("[\\s;]update\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]insert\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]delete\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]into\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]create\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]truncate\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]alter\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]drop\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]rename\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]grant\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]revoke\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]source\\s+", Pattern.DOTALL));
        selectBlockList.add(Pattern.compile("[\\s;]load\\s+", Pattern.DOTALL));
    }

    Pattern selectAllow = Pattern.compile("\\s*select[^;]*;?\\s*", Pattern.DOTALL);


    public DynamicSqlSourceX(Configuration configuration, boolean updateFlag) {
        this.configuration = configuration;
        this.updateFlag = updateFlag;
    }

    @SuppressWarnings("unchecked")
    @Override
    public BoundSql getBoundSql(Object parameterObject) {
        Map<String, String> parames = (Map<String, String>) parameterObject;
        if (!parames.containsKey("sql") || parames.get("sql") == null) {
            throw new IllegalStateException("缺少sql语句");
        }
        String sql = parames.get("sql");
        String sqlToCheck = " " + sql.toLowerCase();
        if (updateFlag) {
            throw new IllegalStateException("无效select查询sql 【 " + sql + " 】");
        } else {
            if (!selectAllow.matcher(sqlToCheck).matches()) {
                throw new IllegalStateException("无效select查询sql 【 " + sql + " 】");
            }
            for (Pattern pattern : selectBlockList) {
                if (pattern.matcher(sqlToCheck).find()) {
                    throw new IllegalStateException("无效select查询sql 【 " + sql + " 】");
                }
            }
        }

        String scriptSql = "<script>" + sql.replace(">", "&gt;").replace("<", "&lt;") + "</script>";
        XPathParser parser = new XPathParser(scriptSql, false, configuration.getVariables(), new XMLMapperEntityResolver());
        XNode xNode = parser.evalNode("/script");
        XMLScriptBuilder xmlScriptBuilder = new XMLScriptBuilder(configuration, xNode);
        return xmlScriptBuilder.parseScriptNode().getBoundSql(parames);
    }
}
